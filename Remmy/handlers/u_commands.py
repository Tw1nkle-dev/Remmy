from aiogram import Router, types, F, Bot
from keyboards import replyr, inliner
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton


from keyboards import calen
from data.state import zmin_s, user_states, user_counters, ad, kli, user_data_ys, user_datas, but_sav, his

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    if user_id not in but_sav:
        but_sav[user_id] = {
            "buttons": ["‚ûï"] * 8,
            "occupied": 0
        }
    if user_id not in his:
        his[user_id] = {
            "buttons":
                ['üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä',
                 '‚úç–ù–æ—Ç–∞—Ç–∫–∏',
                 'üìã–†–æ–∑–∫–ª–∞–¥',
                 '‚ò∞'],
                "occupied": 0,
                "recent_buttons": []
        }
    button_row1 = [
        KeyboardButton(text=his[user_id]["buttons"][i]) for i in range(len(his[user_id]["buttons"]))
    ]

    button_row2 = [
        KeyboardButton(text=but_sav[user_id]["buttons"][i]) for i in range(8)
    ]
    main = ReplyKeyboardMarkup(
        keyboard=[
            button_row1,
            button_row2
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é',
        selective=True
    )
    await message.answer("–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –†–µ–º—á–∏–∫ —ñ —è —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, —â–æ–± —Ç–æ–±—ñ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏\n\n–§—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ —É –º–µ–Ω–µ –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ñ:\n-—Ä—ñ–∑–Ω–æ–≤–∏–¥–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏\n-–∫–∞–ª–µ–Ω–¥–∞—Ä\n-–Ω–æ—Ç–∞—Ç–Ω–∏–∫\n\n–ü–µ—Ä–µ–≤–∞–≥–∏ Remmy:\n-—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å\n-–ø–æ—Å—Ç—ñ–π–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", reply_markup=main)


@router.message(Command(commands=["calendar"]))
@router.message(F.text.lower() == "üìÖ–∫–∞–ª–µ–Ω–¥–∞—Ä")
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = "start"
    user_counters[user_id] = 0
    ad[user_id] = 0
    kli[user_id] = 0
    user_datas[user_id] = None
    user_data_ys[user_id] = None

    print(f"User ID: {user_id}, State: {user_states[user_id]}")

    zmin_s[user_id] = "calendar"

    keyboard = calen.create_calendar_keyboard(None, None, 0, 0, user_id)
    await message.answer("üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä", reply_markup=keyboard)


# @router.message(Command(commands=["roz"]))
@router.message(F.text.lower() == "üìã—Ä–æ–∑–∫–ª–∞–¥")
async def start_handler(message: Message):

    await message.answer("üìã–†–æ–∑–∫–ª–∞–¥", reply_markup=inliner.rozk)


@router.message(F.text.lower() == "–Ω—É–ª–ø")
async def start_handler(message: Message):
    await message.answer("–†–æ–∑–∫–ª–∞–¥ –ù–£–õ–ü", reply_markup=inliner.rozk_lpnu)
